output_size <- 1
w1 <- runif(input_size * hidden_size)
b1 <- runif(hidden_size)
w2 <- runif(hidden_size * output_size)
b2 <- runif(output_size)
# Learning rate
learning_rate <- 0.01
# Training loop
epochs <- 10000
# Inisialisasi loss sebelumnya dengan nilai yang besar
prev_loss <- Inf
for (epoch in 1:epochs) {
# Forward Propagation
z1 <- X * w1 + b1
a1 <- pmax(0, z1)  # Fungsi aktivasi ReLU
z2 <- a1 * w2 + b2
a2 <- 1 / (1 + exp(-z2))
# Hitung loss
loss <- mean((a2 - Y) ^ 2)
# Backpropagation
delta_a2 <- a2 - Y
delta_z2 <- delta_a2 * a2 * (1 - a2)
delta_a1 <- delta_z2 * w2
delta_z1 <- delta_a1 * (z1 > 0)  # Turunan fungsi aktivasi ReLU
# Update bobot dan bias
w2 <- w2 - a1 * delta_z2 * learning_rate
b2 <- b2 - sum(delta_z2) * learning_rate
w1 <- w1 - X * delta_z1 * learning_rate
b1 <- b1 - sum(delta_z1) * learning_rate
# Print loss setiap 100 epoch
if (epoch %% 100 == 0) {
cat(paste("Epoch:", epoch, "Loss:", loss, "\n"))
}
# Cek apakah loss sudah konvergen
if (abs(prev_loss - loss) < 1e-6) {
cat("Loss telah konvergen, berhenti pelatihan.\n")
break
}
# Simpan nilai loss saat ini sebagai nilai sebelumnya
prev_loss <- loss
}
# Install dan load paket nnet jika belum terpasang
install.packages("nnet")
library(nnet)
# Data training
X <- c(0.1, 0.4, 0.6, 0.8)
Y <- c(0.3, 0.6, 0.7, 0.9)
# Gabungkan data ke dalam data frame
data_df <- data.frame(X, Y)
# Inisialisasi model neural network
model <- nnet(Y ~ X, data = data_df, size = 3, linout = TRUE, trace = TRUE, maxit = 1000)
# Hasil prediksi dengan model yang sudah dilatih
new_data <- data.frame(X = 0.3)
predictions <- predict(model, newdata = new_data)
cat(paste("Hasil Prediksi:", predictions, "\n"))
# Install dan muat library yang diperlukan
install.packages("neuralnet")
library(neuralnet)
# Data input (4 baris, 2 variabel)
X <- matrix(c(0.1, 0.2,
0.4, 0.5,
0.6, 0.7,
0.8, 0.9), ncol = 2, byrow = TRUE)
# Data output (4 baris, 1 variabel)
Y <- matrix(c(0.3, 0.6, 0.7, 0.9), ncol = 1)
# Definisikan model neural network
model <- neuralnet(Y ~ X1 + X2, data = data.frame(X1 = X[,1], X2 = X[,2], Y = Y), hidden = c(3), linear.output = TRUE)
# Training model
model <- neuralnet(Y ~ X1 + X2, data = data.frame(X1 = X[,1], X2 = X[,2], Y = Y), hidden = c(3), linear.output = TRUE)
# Print hasil training
print(model)
# Prediksi dengan model yang sudah dilatih
new_data <- data.frame(X1 = 0.3, X2 = 0.4)
prediction <- predict(model, new_data)
# Print hasil prediksi
print(prediction)
plot(model)
# Print hasil prediksi
print(prediction)
# Print hasil training
print(model)
search()
ls(3)
help(nnet)
ls(9)
iris3
iris
# use half the iris data
ir <- rbind(iris3[,,1],iris3[,,2],iris3[,,3])
ir
targets <- class.ind( c(rep("s", 50), rep("c", 50), rep("v", 50)) )
targets
samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
samp
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
test.cl <- function(true, pred) {
true <- max.col(true)
cres <- max.col(pred)
table(true, cres)
}
test.cl(targets[-samp,], predict(ir1, ir[-samp,]))
72/75
samp2 <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
ir2 <- nnet(ir[samp2,], targets[samp2,], size = 4, rang = 0.05,
decay = 5e-4, maxit = 400)
ir2 <- nnet(ir[samp2,], targets[samp2,], size = 4, rang = 0.05,
decay = 5e-4, maxit = 400)
test.cl(targets[-samp2,], predict(ir1, ir[-samp2,]))
(24+25+25)/75
# or
ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
species = factor(c(rep("s",50), rep("c", 50), rep("v", 50))))
ir.nn2 <- nnet(species ~ ., data = ird, subset = samp, size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
ir.nn2 <- nnet(species ~ ., data = ird, subset = samp, size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
table(ird$species[-samp], predict(ir.nn2, ird[-samp,], type = "class"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(GGally)
library(car)
library(effects)
library(plotly)
library(kableExtra)
library(MyOLS)
# Baca data
hasil.panen <- read.csv2("D:/Kuliah/SEMESTER 3/ART/data panen pesisir selatan.csv", sep = ";")
hasil.panen
# Cek NA
hasil.panen <- na.omit(hasil.panen)
# Konversi tipe kolom yang seharusnya numerik
hasil.panen$Pupuk <- as.numeric(hasil.panen$Pupuk)
hasil.panen$Luas_tanam <- as.numeric(hasil.panen$Luas_tanam)
hasil.panen$Hasil_panen <- as.numeric(hasil.panen$Hasil_panen)
# Buat X dengan intercept otomatis
X <- model.matrix(~Pupuk + Luas_tanam, data = hasil.panen)
Y <- matrix(as.numeric(hasil.panen$Hasil_panen), ncol = 1)
# Jalankan OLS
model <- MyOLS::ols_fit(X, Y)
# Hasil
print(model$coefficients)
# Prediksi
prediksi_Y <- predict_ols(model, X)
head(prediksi_Y)
model_lm <- lm(Hasil_panen ~ Pupuk + Luas_tanam, data = hasil.panen)
summary(model_lm)
model
100-97.15
?MyOLS
devtools::document()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(GGally)
library(car)
library(effects)
library(plotly)
library(kableExtra)
# Contoh data
library(MyOLS)  # Package buatan sendiri
# Contoh data
set.seed(123)
n <- 100
data <- data.frame(
X1 = rnorm(n, mean = 10, sd = 2),
X2 = rnorm(n, mean = 5, sd = 1),
Y = rnorm(n, mean = 50, sd = 10)
)
# Buat matriks desain (dengan intercept)
X <- model.matrix(~ X1 + X2, data = data)
Y <- matrix(data$Y, ncol = 1)
# Gunakan fungsi dari package sendiri
model <- ols_fit(X, Y)
# Tampilkan hasil estimasi koefisien
model$coefficients
# Prediksi Y menggunakan model dan X
prediksi_Y <- predict_ols(model, X)
# Tampilkan hasil prediksi awal
head(prediksi_Y)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(GGally)
library(car)
library(effects)
library(plotly)
library(kableExtra)
# Contoh data
library(MyOLS)  # Package buatan sendiri
hasil.panen <- read.csv2("D:/Kuliah/SEMESTER 3/ART/data panen pesisir selatan.csv", sep = ";")
hasil.panen
hasil.panen <- na.omit(hasil.panen)
# Konversi tipe kolom yang seharusnya numerik
hasil.panen$Pupuk <- as.numeric(hasil.panen$Pupuk)
hasil.panen$Luas_tanam <- as.numeric(hasil.panen$Luas_tanam)
hasil.panen$Hasil_panen <- as.numeric(hasil.panen$Hasil_panen)
# Buat X dengan intercept otomatis
X <- model.matrix(~Pupuk + Luas_tanam, data = hasil.panen)
Y <- matrix(as.numeric(hasil.panen$Hasil_panen), ncol = 1)
# Jalankan OLS
model <- MyOLS::ols_fit(X, Y)
# Hasil
print(model$coefficients)
[,1]
(Intercept) 2071.637760
Pupuk          3.042110
Luas_tanam     3.705727
# Prediksi
prediksi_Y <- predict_ols(model, X)
head(prediksi_Y)
[,1]
1 20531.82
2 12727.43
3 18916.66
4 23679.01
5 24728.98
6 44427.00
model_lm <- lm(Hasil_panen ~ Pupuk + Luas_tanam, data = hasil.panen)
summary(model_lm)
# Contoh data
library(MyOLS)  # Package buatan sendiri
hasil.panen <- read.csv2("D:/Kuliah/SEMESTER 3/ART/data panen pesisir selatan.csv", sep = ";")
hasil.panen
hasil.panen <- na.omit(hasil.panen)
# Konversi tipe kolom yang seharusnya numerik
hasil.panen$Pupuk <- as.numeric(hasil.panen$Pupuk)
hasil.panen$Luas_tanam <- as.numeric(hasil.panen$Luas_tanam)
hasil.panen$Hasil_panen <- as.numeric(hasil.panen$Hasil_panen)
# Buat X dengan intercept otomatis
X <- model.matrix(~Pupuk + Luas_tanam, data = hasil.panen)
Y <- matrix(as.numeric(hasil.panen$Hasil_panen), ncol = 1)
# Jalankan OLS
model <- MyOLS::ols_fit(X, Y)
# Hasil
print(model$coefficients)
# Prediksi
prediksi_Y <- predict_ols(model, X)
head(prediksi_Y)
model_lm <- lm(Hasil_panen ~ Pupuk + Luas_tanam, data = hasil.panen)
summary(model_lm)
par(mfrow = c(2, 2))
plot(model_lm)
# Daftar nama peserta
nama <- c("Anisa", "nurul", "laila", "ghina", "wiwita")
# Daftar materi presentasi
materi <- c("R Package & Persamaan Model",
"Membuat Model OLS & interpretasi",
"Representasi Matriks & Asumsi",
"Implementasi Regresi di R",
"Diagnostik Model & uji multikolinearitas",
"Visualisasi & Kesimpulan" )
set.seed(123)  # Agar hasil acakan bisa direproduksi
nama_acak <- sample(nama)
# Buat data frame pembagian
pembagian <- data.frame(
No = 1:length(nama_acak),
Nama = nama_acak,
Materi = materi,
Durasi_menit = c(3, 4, 3, 4, 5, 5, 4, 3)
)
# Buat data frame pembagian
pembagian <- data.frame(
No = 1:length(nama_acak),
Nama = nama_acak,
Materi = materi)
# Nama anggota
nama <- c("Anisa", "Nurul", "Laila", "Ghina", "Wiwita")
# Daftar materi
materi <- c("R Package & Persamaan Model",
"Membuat Model OLS & Interpretasi",
"Representasi Matriks & Asumsi",
"Implementasi Regresi di R",
"Diagnostik Model & Uji Multikolinearitas",
"Visualisasi & Kesimpulan")
# Acak nama dan materi
set.seed(123)
nama_acak <- sample(nama)
materi_acak <- sample(materi)
# Bagi materi ke nama secara adil
# Gunakan modulus untuk membagikan sisa
n <- length(nama_acak)
m <- length(materi_acak)
# Buat indeks penugasan
penugasan <- data.frame(
Nama = rep(nama_acak, length.out = m),
Materi = materi_acak
)
# Tambahkan nomor urut
penugasan$No <- 1:nrow(penugasan)
# Tampilkan hasil
knitr::kable(penugasan[, c("No", "Nama", "Materi")],
caption = "Pembagian Adil Materi Presentasi")
# Daftar materi
materi <- c("R Package & Persamaan Model",
"Membuat Model OLS & Interpretasi",
"Representasi Matriks,Visualisasi & Asumsi",
"Implementasi Regresi di R",
"Diagnostik Model & Uji Multikolinearitas",
"Kesimpulan")
# Acak nama dan materi
set.seed(123)
nama_acak <- sample(nama)
materi_acak <- sample(materi)
# Bagi materi ke nama secara adil
# Gunakan modulus untuk membagikan sisa
n <- length(nama_acak)
m <- length(materi_acak)
# Buat indeks penugasan
penugasan <- data.frame(
Nama = rep(nama_acak, length.out = m),
Materi = materi_acak
)
# Tambahkan nomor urut
penugasan$No <- 1:nrow(penugasan)
# Tampilkan hasil
knitr::kable(penugasan[, c("No", "Nama", "Materi")],
caption = "Pembagian Adil Materi Presentasi")
# Nama anggota
nama <- c("Anisa", "Nurul", "Laila", "Ghina", "Wiwita")
# Daftar materi
materi <- c(".R",".Rd")
# Acak nama dan materi
set.seed(123)
nama_acak <- sample(nama)
materi_acak <- sample(materi)
# Bagi materi ke nama secara adil
# Gunakan modulus untuk membagikan sisa
n <- length(nama_acak)
m <- length(materi_acak)
# Buat indeks penugasan
penugasan <- data.frame(
Nama = rep(nama_acak, length.out = m),
Materi = materi_acak
)
# Tambahkan nomor urut
penugasan$No <- 1:nrow(penugasan)
# Tampilkan hasil
knitr::kable(penugasan[, c("No", "Nama", "Materi")],
caption = "Pembagian Adil Materi Presentasi")
# Nama anggota
nama <- c("Anisa", "Ghina", "Wiwita")
# Daftar materi
materi <- c(".R",".Rd")
# Acak nama dan materi
set.seed(123)
nama_acak <- sample(nama)
materi_acak <- sample(materi)
# Bagi materi ke nama secara adil
# Gunakan modulus untuk membagikan sisa
n <- length(nama_acak)
m <- length(materi_acak)
# Buat indeks penugasan
penugasan <- data.frame(
Nama = rep(nama_acak, length.out = m),
Materi = materi_acak
)
# Tambahkan nomor urut
penugasan$No <- 1:nrow(penugasan)
# Tampilkan hasil
knitr::kable(penugasan[, c("No", "Nama", "Materi")],
caption = "Pembagian Adil Materi Presentasi")
# Nama anggota
nama <- c("Ghina", "Wiwita")
# Daftar materi
materi <- c("olsfit","predict")
# Acak nama dan materi
set.seed(123)
nama_acak <- sample(nama)
materi_acak <- sample(materi)
# Bagi materi ke nama secara adil
# Gunakan modulus untuk membagikan sisa
n <- length(nama_acak)
m <- length(materi_acak)
# Buat indeks penugasan
penugasan <- data.frame(
Nama = rep(nama_acak, length.out = m),
Materi = materi_acak
)
# Tambahkan nomor urut
penugasan$No <- 1:nrow(penugasan)
# Tampilkan hasil
knitr::kable(penugasan[, c("No", "Nama", "Materi")],
caption = "Pembagian Adil Materi Presentasi")
# Di dalam direktori project package-mu
usethis::use_git()               # Inisialisasi Git
usethis::use_github()            # Buat dan push langsung ke GitHub
# Lakukan commit jika belum
usethis::use_git_message("Initial commit for MyOLS package")
# Tambahkan semua perubahan
system("git add .")
# Commit dengan pesan
system('git commit -m "Initial commit for MyOLS package"')
# Lalu push
system("git push -u origin main")
# Hapus remote lama (lailanajmiii)
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
# Tambahkan remote kamu sendiri
usethis::use_git_remote("origin", url = "https://github.com/anisa-git/MyOLS.git")
# Push
system("git push -u origin main")
# 1. Tambahkan semua file
system("git add .")
# 2. Buat commit pertama
system('git commit -m "Initial commit"')
# 3. Buat dan pindah ke branch 'main'
system("git branch -M main")
# 4. Push ke GitHub
system("git push -u origin main")
# Cek status Git (opsional)
system("git status")
# Cek remote (opsional)
system("git remote -v")
# 1. Tambahkan semua file
system("git add .")
# 2. Buat commit pertama
system('git commit -m "Initial commit"')
# 3. Buat dan pindah ke branch 'main'
system("git branch -M main")
# 4. Push ke GitHub
system("git push -u origin main")
usethis::use_git_remote("origin", url = "https://github.com/anisa-git/MyOLS.git", overwrite = TRUE)
# 1. Tambahkan semua file
system("git add .")
# 2. Buat commit pertama
system('git commit -m "Initial commit"')
# 3. Buat dan pindah ke branch 'main'
system("git branch -M main")
# 4. Push ke GitHub
system("git push -u origin main")
# 1. Tambahkan semua file
system("git add .")
# 2. Buat commit pertama
system('git commit -m "Initial commit"')
# 3. Buat dan pindah ke branch 'main'
system("git branch -M main")
# 4. Push ke GitHub
system("git push -u origin main")
usethis::create_package()
devtools::check()
usethis::use_git_remote("origin", url = "https://github.com/anisa-git/MyOLS.git", overwrite = TRUE)
# 1. Tambahkan semua file
system("git add .")
# 2. Buat commit pertama
system('git commit -m "Initial commit"')
# 3. Buat dan pindah ke branch 'main'
system("git branch -M main")
# 4. Push ke GitHub
system("git push -u origin main")
# Cek status Git (opsional)
system("git status")
# Cek remote (opsional)
system("git remote -v")
system("git branch")
system('git config --global user.name "anisa-git"')
system('git config --global user.email "anisasabaniyah86@gmail.com"')
devtools::document()
devtools::document()
devtools::document()
devtools::clean_dll()
devtools::document()
readLines("DESCRIPTION")
devtools::document()
devtools::document()
system("git add .")
system('git commit -m "Update semua perubahan termasuk DESCRIPTION"')
system("git push origin main")
library(packgbdist)  # Pastikan sudah install dan load paket yang kamu buat
# 1. Tambahkan semua file
system("git add .")
devtools::install_github("hadley/pkgdown")
pkgdown::build_site()
# Tambahkan semua perubahan
system("git add .")
# Commit dengan pesan
system('git commit -m "Initial commit for MyOLS package"')
# Lalu push
system("git push -u origin main")
devtools::check()
pkgdown::build_site()
usethis::use_mit_license("Tema 2")
usethis::use_mit_license("Team 2")
usethis::use_mit_license("Team 2")
usethis::use_mit_license("Team 2")
# Tambahkan semua perubahan
system("git add .")
# Commit dengan pesan
system('git commit -m "Initial commit for MyOLS package"')
# Lalu push
system("git push -u origin main")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(car)
library(car)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(effects)
install.packages("effects")
install.packages("car")
install.packages("devtools")
devtools::build()
devtools::install()
hasil.panen <- read.csv2("D:/Kuliah/SEMESTER 3/ART/data panen pesisir selatan.csv", sep = ";")
hasil.panen
devtools::document()
devtools::build()
devtools::install()
normality(model)
